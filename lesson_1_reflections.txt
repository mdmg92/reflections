How did viewing a diff between two versions of a file help you see the bug that was introduced?

It helped because I was able to see the difference between the two files,
and easily identify typos in this case or other types of errors.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

I really don't know at this point yet

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

The pros are that the version control is more understandable, since we commit only logical changes. A cons of this coul be that we have to have a good judgement to decide weather is convinient or not to do a commit.

The cons of having versions saved automatically is that there will be many version controls of the document, and it would be hard to understand all of it. A pro of this could be that if we forget to save changes, Google already did it for us.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Because GIT is oriented to projects, and coding, so for Git makes a lot of sense to save some files toguether it they are related rather than in separated ways. In exchange, Google is oriented to single docs system, so it doesn't make much sense to treat the files togueter.

How can you use the commands git log and git diff to view the history of files?

We can use git log to see the differents commits done, with a comment indicating what has changed from previous version of the file. This commits has an unique ID to identify them. 
With git diff, we can use the ID ot two commits to see the differences between two files, line by line, marking in red color the lines deleted and with green color de lines added or edited.

How might using version control make you more confident to make changes that could break something?

Because I would recover my file before any bug or errors at any time I want, and with a little work I can identified whats the version that is first holding an error with the version control.

Now that you have your workspace set up, what do you want to try using Git for?

I would like to try a slightly large project, edited, and see how it helps me detecting typos, erros, bugs, etc. and see how git contributes to make myself a better programmer.