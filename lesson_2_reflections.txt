What happens when you initialize a repository? Why do you need to do it?

It creates a hidden forlder named .git that will store metadata about 
the changes we commit to the files in the directory where we created 
the repository. We need git to do it, a directory for our repository 
and run the command git init on it

How can you use the staging area to make sure you have one commit per 
logical change?

Using git diff I can see the changes between the file on my working 
directory and the staging area, and check what are the changes. If more 
than one logical change have been made in the working directory, I can 
fix this before adding the file to the staging area and commit the 
change. I can also check before commiting with git dif --staged to make 
sure off the changes I'm about to make.

What are some situations when branches would be helpful in keeping your 
history organized? How would branches help?

When we want to add an experimental feature to the code, try new things 
in the project or creating a new module that we don't want to be 
reflected (yet) on the master branch.

How do the diagrams help you visualize the branch structure?

It make it easy to understand graphically than in the command lines, 
because I was able to see a more clear representation of branches like 
trees, indentify the parent of a branch and understand why a branche 
can become innacessible

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merge files comparing it with a third commit (the parent in common). 
The result is not a complete merge, rather a logical merge of the files 
The representation was to see how the to branches come togheter once 
the merge is done.